import ccxt
import pandas as pd
import numpy as np
import time

# Initialize exchange (Binance as an example)
exchange = ccxt.binance({
    'apiKey': 'YOUR_API_KEY',
    'secret': 'YOUR_API_SECRET',
})

def fetch_data(symbol, timeframe='1m', limit=100):
    """Fetch historical OHLCV data"""
    bars = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    df = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df

def apply_strategy(df):
    """Apply trading strategy to the data"""
    df['SMA50'] = df['close'].rolling(window=50).mean()
    df['SMA200'] = df['close'].rolling(window=200).mean()
    df['signal'] = 0
    df['signal'][50:] = np.where(df['SMA50'][50:] > df['SMA200'][50:], 1, -1)
    return df

def execute_trade(signal, symbol, amount):
    """Execute trade based on signal"""
    if signal == 1:
        order = exchange.create_market_buy_order(symbol, amount)
        print(f"Bought {amount} of {symbol}")
    elif signal == -1:
        order = exchange.create_market_sell_order(symbol, amount)
        print(f"Sold {amount} of {symbol}")

def main():
    symbol = 'BTC/USDT'
    amount = 0.001  # Example amount
    while True:
        df = fetch_data(symbol)
        df = apply_strategy(df)
        signal = df['signal'].iloc[-1]
        execute_trade(signal, symbol, amount)
        time.sleep(60)  # Wait for 1 minute before the next iteration

if __name__ == "__main__":
    main()
